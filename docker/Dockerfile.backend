# Backend Dockerfile for FEniCS + FastAPI
FROM continuumio/miniconda3:latest

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV CONDA_ALWAYS_YES=true

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    git \
    libopenmpi-dev \
    libhdf5-dev \
    libnetcdf-dev \
    libgl1-mesa-glx \
    libglu1-mesa \
    libxrender1 \
    libxext6 \
    libsm6 \
    libfontconfig1 \
    && rm -rf /var/lib/apt/lists/*

# Create conda environment with FEniCS
RUN conda create -n acoustic-sim python=3.11 -y
SHELL ["conda", "run", "-n", "acoustic-sim", "/bin/bash", "-c"]

# Install FEniCS via conda-forge (more reliable than pip)
RUN conda install -c conda-forge \
    fenics-dolfinx \
    petsc4py \
    slepc4py \
    mpi4py \
    gmsh \
    meshio \
    h5py \
    netcdf4 \
    -y

# Install Python dependencies
RUN pip install --no-cache-dir \
    fastapi==0.104.1 \
    uvicorn[standard]==0.24.0 \
    websockets==12.0 \
    pydantic==2.5.0 \
    numpy==1.24.3 \
    scipy==1.11.4 \
    matplotlib==3.7.2 \
    plotly==5.17.0 \
    python-multipart==0.0.6 \
    aiofiles==23.2.1 \
    redis==5.0.1 \
    rq==1.15.1

# Set working directory
WORKDIR /app

# Copy requirements first for better caching
COPY pyproject.toml ./
RUN pip install -e .

# Copy application code
COPY backend/ ./backend/
COPY fem/ ./fem/

# Create directories for data
RUN mkdir -p /app/data/{meshes,results,cache}

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Run the application
CMD ["conda", "run", "-n", "acoustic-sim", "uvicorn", "backend.app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
